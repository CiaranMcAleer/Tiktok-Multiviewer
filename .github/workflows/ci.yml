#Commented out until I fix pnpm issues at a later date
#TODO: Fix ci pipeline
#name: CI/CD Pipeline
#
#on:
#  push:
#    branches: [ main, develop ]
#  pull_request:
#    branches: [ main, develop ]

#jobs:
#  # Job 1: Unit and Integration Tests
#  test-unit:
#    runs-on: ubuntu-latest
#    
#    strategy:
#      matrix:
#        node-version: [18.x, 20.x]
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#      
#    - name: Setup Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v4
#      with:
#        node-version: ${{ matrix.node-version }}
#        cache: 'pnpm'
#        
#    - name: Install pnpm
#      uses: pnpm/action-setup@v2
#      with:
#        version: 8
#    - name: Verify pnpm installation
#      run: pnpm --version
#        
#    - name: Install dependencies
#      run: pnpm install --frozen-lockfile
#      
#    - name: Run linting
#      run: pnpm run lint
#      continue-on-error: true
#      
#    - name: Run unit and integration tests
#      run: pnpm run test:ci
#      continue-on-error: true
#      
#    - name: Upload coverage reports
#      uses: codecov/codecov-action@v3
#      if: always()
#      with:
#        file: ./coverage/lcov.info
#        fail_ci_if_error: false
#        
#    - name: Archive test results
#      uses: actions/upload-artifact@v4
#      if: always()
#      with:
#        name: unit-test-results-${{ matrix.node-version }}
#        path: |
#          coverage/
#          test-results*.log
#
#  # Job 2: Build Test
#  test-build:
#    runs-on: ubuntu-latest
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#      
#    - name: Setup Node.js
#      uses: actions/setup-node@v4
#      with:
#        node-version: '20.x'
#        cache: 'pnpm'
#        
#    - name: Install pnpm
#      uses: pnpm/action-setup@v2
#      with:
#        version: 8
#    - name: Verify pnpm installation
#      run: pnpm --version
#        
#    - name: Install dependencies
#      run: pnpm install --frozen-lockfile
#      
#    - name: Build application
#      run: pnpm run build
#      
#    - name: Archive build artifacts
#      uses: actions/upload-artifact@v4
#      with:
#        name: build-artifacts
#        path: |
#          .next/
#          !.next/cache/
#
#  # Job 3: E2E Tests
#  test-e2e:
#    runs-on: ubuntu-latest
#    needs: test-build
#    
#    strategy:
#      matrix:
#        browser: [chromium, firefox, webkit]
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#      
#    - name: Setup Node.js
#      uses: actions/setup-node@v4
#      with:
#        node-version: '20.x'
#        cache: 'pnpm'
#        
#    - name: Install pnpm
#      uses: pnpm/action-setup@v2
#      with:
#        version: 8
#    - name: Verify pnpm installation
#      run: pnpm --version
#        
#    - name: Install dependencies
#      run: pnpm install --frozen-lockfile
#      
#    - name: Install Playwright browsers
#      run: pnpm exec playwright install --with-deps ${{ matrix.browser }}
#      
#    - name: Build application
#      run: pnpm run build
#      
#    - name: Start application
#      run: pnpm run start &
#      
#    - name: Wait for app to be ready
#      run: npx wait-on http://localhost:3000 --timeout 60000
#      
#    - name: Run E2E tests
#      run: pnpm exec playwright test --project=${{ matrix.browser }}
#      env:
#        CI: true
#        
#    - name: Upload E2E test results
#      uses: actions/upload-artifact@v4
#      if: always()
#      with:
#        name: e2e-test-results-${{ matrix.browser }}
#        path: |
#          test-results/
#          playwright-report/
#        retention-days: 7
#
#  # Job 4: Security and Quality Checks
#  security-quality:
#    runs-on: ubuntu-latest
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#      
#    - name: Setup Node.js
#      uses: actions/setup-node@v4
#      with:
#        node-version: '20.x'
#        cache: 'pnpm'
#        
#    - name: Install pnpm
#      uses: pnpm/action-setup@v2
#      with:
#        version: 8
#    - name: Verify pnpm installation
#      run: pnpm --version
#        
#    - name: Install dependencies
#      run: pnpm install --frozen-lockfile
#      
#    - name: Run security audit
#      run: pnpm audit --audit-level=moderate
#      continue-on-error: true
#
## Summary Job - Check if all tests passed
#  all-tests-passed:
#    runs-on: ubuntu-latest
#    needs: [test-unit, test-build, test-e2e, security-quality]
#    if: always()
#    
#    steps:
#    - name: Check test results
#      run: |
#        echo "Unit tests: ${{ needs.test-unit.result }}"
#        echo "Build: ${{ needs.test-build.result }}"
#        echo "E2E tests: ${{ needs.test-e2e.result }}"
#        echo "Security: ${{ needs.security-quality.result }}"
#        
#        # Build must succeed, but tests can have some failures during development
#        if [[ "${{ needs.test-build.result }}" != "success" ]]; then
#          echo "❌ Build failed - this is critical!"
#          exit 1
#        fi
#        
#        # For tests, we'll report status but not fail the pipeline during development
#        if [[ "${{ needs.test-unit.result }}" == "success" && 
#              "${{ needs.test-e2e.result }}" == "success" ]]; then
#          echo "✅ All tests passed!"
#        else
#          echo "⚠️ Some tests failed, but pipeline continues for development"
#        fi
#        
#    - name: Create test summary
#      if: always()
#      run: |
#        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
#        echo "" >> $GITHUB_STEP_SUMMARY
#        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
#        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
#        echo "| Unit & Integration | ${{ needs.test-unit.result == 'success' && '✅ Passed' || '⚠️ Has Issues' }} |" >> $GITHUB_STEP_SUMMARY
#        echo "| Build | ${{ needs.test-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
#        echo "| E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Passed' || '⚠️ Has Issues' }} |" >> $GITHUB_STEP_SUMMARY
#        echo "| Security & Quality | ${{ needs.security-quality.result == 'success' && '✅ Passed' || '⚠️ Has Issues' }} |" >> $GITHUB_STEP_SUMMARY
#        echo "" >> $GITHUB_STEP_SUMMARY
#        echo "**Note**: During development, test failures don't block the pipeline. Only build failures are critical." >> $GITHUB_STEP_SUMMARY
#